{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Griffe Inherited Docstrings","text":"<p>Griffe extension for inheriting docstrings.</p>"},{"location":"#installation","title":"Installation","text":"<p>With <code>pip</code>:</p> <pre><code>pip install griffe-inherited-docstrings\n</code></pre> <p>With <code>pipx</code>:</p> <pre><code>python3.8 -m pip install --user pipx\npipx install griffe-inherited-docstrings\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>With Python:</p> <pre><code>import griffe\n\ngriffe.load(\"...\", extensions=griffe.load_extensions([\"griffe_inherited_docstrings\"]))\n</code></pre> <p>With MkDocs and mkdocstrings:</p> <pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          extensions:\n          - griffe_inherited_docstrings\n</code></pre> <p>The extension will iterate on every class and their members to set docstrings from parent classes when they are not already defined.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#100-2024-01-05","title":"1.0.0 - 2024-01-05","text":"<p>Compare with first commit</p>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Implement extension (993e4e1 by Timoth\u00e9e Mazzucotelli).</li> <li>Generate project with copier-pdm template (2e71db6 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at dev@pawamoy.fr. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#environment-setup","title":"Environment setup","text":"<p>Nothing easier!</p> <p>Fork and clone the repository, then:</p> <pre><code>cd griffe-inherited-docstrings\nmake setup\n</code></pre> <p>Note</p> <p> If it fails for some reason, you'll need to install uv manually.</p> <p>You can install it with:</p> <pre><code>python3 -m pip install --user pipx\npipx install uv\n</code></pre> <p>Now you can try running <code>make setup</code> again, or simply <code>uv install</code>.</p> <p>You now have the dependencies installed.</p> <p>Run <code>make help</code> to see all the available actions!</p>"},{"location":"contributing/#tasks","title":"Tasks","text":"<p>This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you run the task directly with <code>make run duty TASK</code>.</p> <p>The Makefile detects if a virtual environment is activated, so <code>make</code> will work the same with the virtualenv activated or not.</p> <p>If you work in VSCode, we provide an action to configure VSCode for the project.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>As usual:</p> <ol> <li>create a new branch: <code>git switch -c feature-or-bugfix-name</code></li> <li>edit the code and/or the documentation</li> </ol> <p>Before committing:</p> <ol> <li>run <code>make format</code> to auto-format the code</li> <li>run <code>make check</code> to check everything (fix any warning)</li> <li>run <code>make test</code> to run the tests (fix any issue)</li> <li>if you updated the documentation or the project dependencies:<ol> <li>run <code>make docs</code></li> <li>go to http://localhost:8000 and check that everything looks good</li> </ol> </li> <li>follow our commit message convention</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#commit-message-convention","title":"Commit message convention","text":"<p>Commit messages must follow our convention based on the Angular style or the Karma convention:</p> <pre><code>&lt;type&gt;[(scope)]: Subject\n\n[Body]\n</code></pre> <p>Subject and body must be valid Markdown. Subject must have proper casing (uppercase for first letter if it makes sense), but no dot at the end, and no punctuation in general.</p> <p>Scope and body are optional. Type can be:</p> <ul> <li><code>build</code>: About packaging, building wheels, etc.</li> <li><code>chore</code>: About packaging or repo/files management.</li> <li><code>ci</code>: About Continuous Integration.</li> <li><code>deps</code>: Dependencies update.</li> <li><code>docs</code>: About documentation.</li> <li><code>feat</code>: New feature.</li> <li><code>fix</code>: Bug fix.</li> <li><code>perf</code>: About performance.</li> <li><code>refactor</code>: Changes that are not features or bug fixes.</li> <li><code>style</code>: A change in code style/format.</li> <li><code>tests</code>: About tests.</li> </ul> <p>If you write a body, please add trailers at the end (for example issues and PR references, or co-authors), without relying on GitHub's flavored Markdown:</p> <pre><code>Body.\n\nIssue #10: https://github.com/namespace/project/issues/10\nRelated to PR namespace/other-project#15: https://github.com/namespace/other-project/pull/15\n</code></pre> <p>These \"trailers\" must appear at the end of the body, without any blank lines between them. The trailer title can contain any character except colons <code>:</code>. We expect a full URI for each trailer, not just GitHub autolinks (for example, full GitHub URLs for commits and issues, not the hash or the #issue-number).</p> <p>We do not enforce a line length on commit messages summary and body, but please avoid very long summaries, and very long lines in the body, unless they are part of code blocks that must not be wrapped.</p>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash main\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"credits/","title":"Credits","text":""},{"location":"credits/#exec-1--credits","title":"Credits","text":"<p>These projects were used to build griffe-inherited-docstrings. Thank you!</p> <p>Python | uv | copier-uv</p>"},{"location":"credits/#exec-1--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License colorama Cross-platform colored terminal text. <code>&gt;=0.4</code> <code>0.4.6</code> BSD License griffe Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=0.40, &gt;=0.38</code> <code>0.42.0.1.2.0</code> ISC"},{"location":"credits/#exec-1--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License Babel Internationalization utilities <code>~=2.10</code> <code>2.14.0</code> BSD-3-Clause GitPython GitPython is a Python library used to interact with Git repositories <code>3.1.42</code> BSD-3-Clause Jinja2 A very fast and expressive template engine. <code>&gt;=2.11.1</code> <code>3.1.3</code> BSD-3-Clause Markdown Python implementation of John Gruber's Markdown. <code>&gt;=3.3</code> <code>3.5.2</code> BSD License MarkupSafe Safely add untrusted strings to HTML/XML markup. <code>&gt;=1.1</code> <code>2.1.5</code> BSD-3-Clause PyYAML YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0.1</code> MIT Pygments Pygments is a syntax highlighting package written in Python. <code>&gt;=2.13.0, &lt;3.0.0</code> <code>2.17.2</code> BSD-2-Clause SecretStorage Python bindings to FreeDesktop.org Secret Service API <code>&gt;=3.2</code> <code>3.3.3</code> BSD 3-Clause License ansimarkup Produce colored terminal text with an xml-like markup <code>~=1.4</code> <code>1.5.0</code> Revised BSD License appdirs A small Python module for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=1.4</code> <code>1.4.4</code> MIT black The uncompromising code formatter. <code>&gt;=23.9</code> <code>24.3.0</code> MIT blacken-docs Run Black on Python code blocks in documentation files. <code>&gt;=1.16</code> <code>1.16.0</code> MIT build A simple, correct Python build frontend <code>&gt;=1.0</code> <code>1.1.1</code> MIT License certifi Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2024.2.2</code> MPL-2.0 cffi Foreign Function Interface for Python calling C code. <code>&gt;=1.12</code> <code>1.16.0</code> MIT charset-normalizer The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&gt;=2, &lt;4</code> <code>3.3.2</code> MIT click Composable command line interface toolkit <code>&gt;=7.0</code> <code>8.1.7</code> BSD-3-Clause colorama Cross-platform colored terminal text. <code>&gt;=0.4</code> <code>0.4.6</code> BSD License coverage Code coverage measurement for Python <code>&gt;=5.2.1</code> <code>7.4.4</code> Apache-2.0 cryptography cryptography is a package which provides cryptographic recipes and primitives to Python developers. <code>&gt;=2.0</code> <code>42.0.5</code> Apache-2.0 OR BSD-3-Clause csscompressor A python port of YUI CSS Compressor <code>&gt;=0.9.5</code> <code>0.9.5</code> BSD docutils Docutils -- Python Documentation Utilities <code>&gt;=0.13.1</code> <code>0.20.1</code> public domain, Python, 2-Clause BSD, GPL 3 (see COPYING.txt) dparse A parser for Python dependency files <code>&gt;=0.6.2</code> <code>0.6.3</code> MIT license duty A simple task runner. <code>&gt;=0.10</code> <code>1.2.0</code> ISC execnet execnet: rapid multi-Python deployment <code>&gt;=1.1</code> <code>2.0.2</code> MIT failprint Run a command, print its output only if it fails. <code>&gt;=0.11, !=1.0.0</code> <code>1.0.2</code> ISC ghp-import Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License git-changelog Automatic Changelog generator using Jinja2 templates. <code>&gt;=2.3</code> <code>2.4.1</code> ISC gitdb Git Object Database <code>&gt;=4.0.1, &lt;5</code> <code>4.0.11</code> BSD License griffe Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=0.40, &gt;=0.38</code> <code>0.42.0.1.2.0</code> ISC htmlmin2 An HTML Minifier <code>&gt;=0.1.13</code> <code>0.1.13</code> BSD idna Internationalized Domain Names in Applications (IDNA) <code>&gt;=2.5, &lt;4</code> <code>3.6</code> BSD License importlib_metadata Read metadata from Python packages <code>&gt;=4.6</code> <code>7.0.2</code> Apache Software License iniconfig brain-dead simple config-ini parsing <code>2.0.0</code> MIT jaraco.classes Utility functions for Python class constructs <code>3.3.1</code> MIT License jeepney Low-level, pure Python DBus protocol wrapper. <code>&gt;=0.4.2</code> <code>0.8.0</code> MIT License jsmin JavaScript minifier. <code>&gt;=3.0.1</code> <code>3.0.1</code> MIT License keyring Store and access your passwords safely. <code>&gt;=15.1</code> <code>24.3.1</code> MIT License markdown-callouts Markdown extension: a classier syntax for admonitions <code>&gt;=0.3</code> <code>0.4.0</code> MIT markdown-exec Utilities to execute code blocks in Markdown files. <code>&gt;=1.7</code> <code>1.7.0.1.0.1</code> ISC markdown-it-py Python port of markdown-it. Markdown parsing, done right! <code>&gt;=2.2.0</code> <code>3.0.0</code> MIT License mdurl Markdown URL utilities <code>~=0.1</code> <code>0.1.2</code> MIT License mergedeep A deep merge function for \ud83d\udc0d. <code>&gt;=1.3.4</code> <code>1.3.4</code> MIT License mkdocs Project documentation with Markdown. <code>&gt;=1.5</code> <code>1.5.3</code> BSD-2-Clause mkdocs-autorefs Automatically link across pages in MkDocs. <code>&gt;=0.3.1</code> <code>1.0.1</code> ISC mkdocs-coverage MkDocs plugin to integrate your coverage HTML report into your site. <code>&gt;=1.0</code> <code>1.0.0</code> ISC mkdocs-gen-files MkDocs plugin to programmatically generate documentation pages during the build <code>&gt;=0.5</code> <code>0.5.0</code> MIT mkdocs-git-committers-plugin-2 An MkDocs plugin to create a list of contributors on the page. The git-committers plugin will seed the template context with a list of GitHub or GitLab committers and other useful GIT info such as last modified date <code>&gt;=1.2</code> <code>2.3.0</code> MIT mkdocs-literate-nav MkDocs plugin to specify the navigation in Markdown instead of YAML <code>&gt;=0.6</code> <code>0.6.1</code> MIT mkdocs-material Documentation that simply works <code>&gt;=9.4</code> <code>9.5.14+insiders.4.53.2</code> MIT mkdocs-material-extensions Extension pack for Python Markdown and MkDocs Material. <code>~=1.3</code> <code>1.3.1</code> MIT mkdocs-minify-plugin An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>&gt;=0.7</code> <code>0.8.0</code> MIT mkdocstrings Automatic documentation from sources, for MkDocs. <code>&gt;=0.23</code> <code>0.24.1</code> ISC mkdocstrings-python A Python handler for mkdocstrings. <code>&gt;=0.5.2</code> <code>1.9.0.1.6.0</code> ISC more-itertools More routines for operating on iterables, beyond itertools <code>10.2.0</code> MIT License mypy Optional static typing for Python <code>&gt;=1.5</code> <code>1.9.0</code> MIT mypy-extensions Type system extensions for programs checked with the mypy type checker. <code>&gt;=1.0.0</code> <code>1.0.0</code> MIT License nh3 Python bindings to the ammonia HTML sanitization library. <code>&gt;=0.2.14</code> <code>0.2.15</code> MIT packaging Core utilities for Python packages <code>24.0</code> Apache Software License + BSD License paginate Divides large result sets into pages for easier browsing <code>~=0.5</code> <code>0.5.6</code> MIT pathspec Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.11.1</code> <code>0.12.1</code> Mozilla Public License 2.0 (MPL 2.0) pkginfo Query metadata from sdists / bdists / installed packages. <code>&gt;=1.8.1</code> <code>1.10.0</code> MIT platformdirs A small Python package for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=2.2.0</code> <code>4.2.0</code> MIT pluggy plugin and hook calling mechanisms for python <code>&gt;=1.4, &lt;2.0</code> <code>1.4.0</code> MIT ptyprocess Run a subprocess in a pseudo terminal <code>~=0.6</code> <code>0.7.0</code> ISC License (ISCL) pycparser C parser in Python <code>2.21</code> BSD pymdown-extensions Extension pack for Python Markdown. <code>&gt;=6.3</code> <code>10.7.1</code> MIT pyproject_hooks Wrappers to call pyproject.toml-based build backend hooks. <code>1.0.0</code> MIT License pytest pytest: simple powerful testing with Python <code>&gt;=7.4</code> <code>8.1.1</code> MIT pytest-cov Pytest plugin for measuring coverage. <code>&gt;=4.1</code> <code>4.1.0</code> MIT pytest-randomly Pytest plugin to randomly order tests and control random.seed. <code>&gt;=3.15</code> <code>3.15.0</code> MIT pytest-xdist pytest xdist plugin for distributed testing, most importantly across multiple CPUs <code>&gt;=3.3</code> <code>3.5.0</code> MIT python-dateutil Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.9.0.post0</code> BSD License + Apache Software License pyyaml_env_tag A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License readme_renderer readme_renderer is a library for rendering readme descriptions for Warehouse <code>&gt;=35.0</code> <code>43.0</code> Apache License, Version 2.0 regex Alternative regular expression module, to replace re. <code>&gt;=2022.4</code> <code>2023.12.25</code> Apache Software License requests Python HTTP for Humans. <code>2.31.0</code> Apache 2.0 requests-toolbelt A utility belt for advanced users of python-requests <code>&gt;=0.8.0, !=0.9.0</code> <code>1.0.0</code> Apache 2.0 rfc3986 Validating URI References per RFC 3986 <code>&gt;=1.4.0</code> <code>2.0.0</code> Apache 2.0 rich Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal <code>&gt;=12.0.0</code> <code>13.7.1</code> MIT ruamel.yaml ruamel.yaml is a YAML parser/emitter that supports roundtrip preservation of comments, seq/map flow style, and map key order <code>&gt;=0.17.21</code> <code>0.18.6</code> MIT license ruamel.yaml.clib C version of reader, parser and emitter for ruamel.yaml derived from libyaml <code>&gt;=0.2.7</code> <code>0.2.8</code> MIT ruff An extremely fast Python linter and code formatter, written in Rust. <code>&gt;=0.0</code> <code>0.3.3</code> MIT safety Checks installed dependencies for known vulnerabilities and licenses. <code>&gt;=2.3</code> <code>2.3.4</code> MIT license semver Python helper for Semantic Versioning (https://semver.org) <code>&gt;=2.13</code> <code>3.0.2</code> BSD setuptools Easily download, build, install, upgrade, and uninstall Python packages <code>&gt;=19.3</code> <code>69.2.0</code> MIT License six Python 2 and 3 compatibility utilities <code>&gt;=1.5</code> <code>1.16.0</code> MIT smmap A pure Python implementation of a sliding window memory map manager <code>&gt;=3.0.1, &lt;6</code> <code>5.0.1</code> BSD twine Collection of utilities for publishing packages on PyPI <code>&gt;=5.0</code> <code>5.0.0</code> Apache Software License types-Markdown Typing stubs for Markdown <code>&gt;=3.5</code> <code>3.6.0.20240316</code> Apache-2.0 license types-PyYAML Typing stubs for PyYAML <code>&gt;=6.0</code> <code>6.0.12.20240311</code> Apache-2.0 license typing_extensions Backported and Experimental Type Hints for Python 3.8+ <code>&gt;=4.1</code> <code>4.10.0</code> Python Software Foundation License urllib3 HTTP library with thread-safe connection pooling, file post, and more. <code>&gt;=1.26.0</code> <code>2.2.1</code> MIT License watchdog Filesystem events monitoring <code>&gt;=2.0</code> <code>4.0.0</code> Apache-2.0 zipp Backport of pathlib-compatible object wrapper for zip files <code>&gt;=0.5</code> <code>3.18.1</code> MIT License <p>More credits from the author</p>"},{"location":"license/","title":"License","text":"<pre><code>ISC License\n\nCopyright (c) 2023, Timoth\u00e9e Mazzucotelli\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n</code></pre>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li> griffe_inherited_docstrings<ul> <li> debug</li> <li> extension</li> </ul> </li> </ul>"},{"location":"reference/griffe_inherited_docstrings/","title":"Index","text":""},{"location":"reference/griffe_inherited_docstrings/#griffe_inherited_docstrings","title":"griffe_inherited_docstrings","text":"<p>Griffe Inherited Docstrings package.</p> <p>Griffe extension for inheriting docstrings.</p> <p>Modules:</p> <ul> <li> <code>debug</code>         \u2013          <p>Debugging utilities.</p> </li> <li> <code>extension</code>         \u2013          <p>The Griffe extension.</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>InheritDocstringsExtension</code>         \u2013          <p>Griffe extension for inheriting docstrings.</p> </li> </ul>"},{"location":"reference/griffe_inherited_docstrings/#griffe_inherited_docstrings.InheritDocstringsExtension","title":"InheritDocstringsExtension","text":"<p>             Bases: <code>Extension</code></p> <p>Griffe extension for inheriting docstrings.</p> <p>Methods:</p> <ul> <li> <code>on_package_loaded</code>           \u2013            <p>Inherit docstrings from parent classes once the whole package is loaded.</p> </li> </ul>"},{"location":"reference/griffe_inherited_docstrings/#griffe_inherited_docstrings.InheritDocstringsExtension.on_package_loaded","title":"on_package_loaded","text":"<pre><code>on_package_loaded(*, pkg: Module) -&gt; None\n</code></pre> <p>Inherit docstrings from parent classes once the whole package is loaded.</p> Source code in <code>src/griffe_inherited_docstrings/extension.py</code> <pre><code>def on_package_loaded(self, *, pkg: Module) -&gt; None:\n    \"\"\"Inherit docstrings from parent classes once the whole package is loaded.\"\"\"\n    _inherit_docstrings(pkg)\n</code></pre>"},{"location":"reference/griffe_inherited_docstrings/debug/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> debug","text":""},{"location":"reference/griffe_inherited_docstrings/debug/#griffe_inherited_docstrings.debug","title":"debug","text":"<p>Debugging utilities.</p> <p>Classes:</p> <ul> <li> <code>Environment</code>         \u2013          <p>Dataclass to store environment information.</p> </li> <li> <code>Package</code>         \u2013          <p>Dataclass describing a Python package.</p> </li> <li> <code>Variable</code>         \u2013          <p>Dataclass describing an environment variable.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>get_debug_info</code>           \u2013            <p>Get debug/environment information.</p> </li> <li> <code>get_version</code>           \u2013            <p>Get version of the given distribution.</p> </li> <li> <code>print_debug_info</code>           \u2013            <p>Print debug/environment information.</p> </li> </ul>"},{"location":"reference/griffe_inherited_docstrings/debug/#griffe_inherited_docstrings.debug.Environment","title":"Environment  <code>dataclass</code>","text":"<pre><code>Environment(\n    interpreter_name: str,\n    interpreter_version: str,\n    interpreter_path: str,\n    platform: str,\n    packages: list[Package],\n    variables: list[Variable],\n)\n</code></pre> <p>Dataclass to store environment information.</p> <p>Attributes:</p> <ul> <li> <code>interpreter_name</code>             (<code>str</code>)         \u2013          <p>Python interpreter name.</p> </li> <li> <code>interpreter_path</code>             (<code>str</code>)         \u2013          <p>Path to Python executable.</p> </li> <li> <code>interpreter_version</code>             (<code>str</code>)         \u2013          <p>Python interpreter version.</p> </li> <li> <code>packages</code>             (<code>list[Package]</code>)         \u2013          <p>Installed packages.</p> </li> <li> <code>platform</code>             (<code>str</code>)         \u2013          <p>Operating System.</p> </li> <li> <code>variables</code>             (<code>list[Variable]</code>)         \u2013          <p>Environment variables.</p> </li> </ul>"},{"location":"reference/griffe_inherited_docstrings/debug/#griffe_inherited_docstrings.debug.Environment.interpreter_name","title":"interpreter_name  <code>instance-attribute</code>","text":"<pre><code>interpreter_name: str\n</code></pre> <p>Python interpreter name.</p>"},{"location":"reference/griffe_inherited_docstrings/debug/#griffe_inherited_docstrings.debug.Environment.interpreter_path","title":"interpreter_path  <code>instance-attribute</code>","text":"<pre><code>interpreter_path: str\n</code></pre> <p>Path to Python executable.</p>"},{"location":"reference/griffe_inherited_docstrings/debug/#griffe_inherited_docstrings.debug.Environment.interpreter_version","title":"interpreter_version  <code>instance-attribute</code>","text":"<pre><code>interpreter_version: str\n</code></pre> <p>Python interpreter version.</p>"},{"location":"reference/griffe_inherited_docstrings/debug/#griffe_inherited_docstrings.debug.Environment.packages","title":"packages  <code>instance-attribute</code>","text":"<pre><code>packages: list[Package]\n</code></pre> <p>Installed packages.</p>"},{"location":"reference/griffe_inherited_docstrings/debug/#griffe_inherited_docstrings.debug.Environment.platform","title":"platform  <code>instance-attribute</code>","text":"<pre><code>platform: str\n</code></pre> <p>Operating System.</p>"},{"location":"reference/griffe_inherited_docstrings/debug/#griffe_inherited_docstrings.debug.Environment.variables","title":"variables  <code>instance-attribute</code>","text":"<pre><code>variables: list[Variable]\n</code></pre> <p>Environment variables.</p>"},{"location":"reference/griffe_inherited_docstrings/debug/#griffe_inherited_docstrings.debug.Package","title":"Package  <code>dataclass</code>","text":"<pre><code>Package(name: str, version: str)\n</code></pre> <p>Dataclass describing a Python package.</p> <p>Attributes:</p> <ul> <li> <code>name</code>             (<code>str</code>)         \u2013          <p>Package name.</p> </li> <li> <code>version</code>             (<code>str</code>)         \u2013          <p>Package version.</p> </li> </ul>"},{"location":"reference/griffe_inherited_docstrings/debug/#griffe_inherited_docstrings.debug.Package.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>Package name.</p>"},{"location":"reference/griffe_inherited_docstrings/debug/#griffe_inherited_docstrings.debug.Package.version","title":"version  <code>instance-attribute</code>","text":"<pre><code>version: str\n</code></pre> <p>Package version.</p>"},{"location":"reference/griffe_inherited_docstrings/debug/#griffe_inherited_docstrings.debug.Variable","title":"Variable  <code>dataclass</code>","text":"<pre><code>Variable(name: str, value: str)\n</code></pre> <p>Dataclass describing an environment variable.</p> <p>Attributes:</p> <ul> <li> <code>name</code>             (<code>str</code>)         \u2013          <p>Variable name.</p> </li> <li> <code>value</code>             (<code>str</code>)         \u2013          <p>Variable value.</p> </li> </ul>"},{"location":"reference/griffe_inherited_docstrings/debug/#griffe_inherited_docstrings.debug.Variable.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>Variable name.</p>"},{"location":"reference/griffe_inherited_docstrings/debug/#griffe_inherited_docstrings.debug.Variable.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str\n</code></pre> <p>Variable value.</p>"},{"location":"reference/griffe_inherited_docstrings/debug/#griffe_inherited_docstrings.debug.get_debug_info","title":"get_debug_info","text":"<pre><code>get_debug_info() -&gt; Environment\n</code></pre> <p>Get debug/environment information.</p> <p>Returns:</p> <ul> <li> <code>Environment</code>         \u2013          <p>Environment information.</p> </li> </ul> Source code in <code>src/griffe_inherited_docstrings/debug.py</code> <pre><code>def get_debug_info() -&gt; Environment:\n    \"\"\"Get debug/environment information.\n\n    Returns:\n        Environment information.\n    \"\"\"\n    py_name, py_version = _interpreter_name_version()\n    packages = [\"griffe-inherited-docstrings\"]\n    variables = [\"PYTHONPATH\", *[var for var in os.environ if var.startswith(\"GRIFFE_INHERITED_DOCSTRINGS\")]]\n    return Environment(\n        interpreter_name=py_name,\n        interpreter_version=py_version,\n        interpreter_path=sys.executable,\n        platform=platform.platform(),\n        variables=[Variable(var, val) for var in variables if (val := os.getenv(var))],\n        packages=[Package(pkg, get_version(pkg)) for pkg in packages],\n    )\n</code></pre>"},{"location":"reference/griffe_inherited_docstrings/debug/#griffe_inherited_docstrings.debug.get_version","title":"get_version","text":"<pre><code>get_version(\n    dist: str = \"griffe-inherited-docstrings\",\n) -&gt; str\n</code></pre> <p>Get version of the given distribution.</p> <p>Parameters:</p> <ul> <li> <code>dist</code>             (<code>str</code>, default:                 <code>'griffe-inherited-docstrings'</code> )         \u2013          <p>A distribution name.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>A version number.</p> </li> </ul> Source code in <code>src/griffe_inherited_docstrings/debug.py</code> <pre><code>def get_version(dist: str = \"griffe-inherited-docstrings\") -&gt; str:\n    \"\"\"Get version of the given distribution.\n\n    Parameters:\n        dist: A distribution name.\n\n    Returns:\n        A version number.\n    \"\"\"\n    try:\n        return metadata.version(dist)\n    except metadata.PackageNotFoundError:\n        return \"0.0.0\"\n</code></pre>"},{"location":"reference/griffe_inherited_docstrings/debug/#griffe_inherited_docstrings.debug.print_debug_info","title":"print_debug_info","text":"<pre><code>print_debug_info() -&gt; None\n</code></pre> <p>Print debug/environment information.</p> Source code in <code>src/griffe_inherited_docstrings/debug.py</code> <pre><code>def print_debug_info() -&gt; None:\n    \"\"\"Print debug/environment information.\"\"\"\n    info = get_debug_info()\n    print(f\"- __System__: {info.platform}\")\n    print(f\"- __Python__: {info.interpreter_name} {info.interpreter_version} ({info.interpreter_path})\")\n    print(\"- __Environment variables__:\")\n    for var in info.variables:\n        print(f\"  - `{var.name}`: `{var.value}`\")\n    print(\"- __Installed packages__:\")\n    for pkg in info.packages:\n        print(f\"  - `{pkg.name}` v{pkg.version}\")\n</code></pre>"},{"location":"reference/griffe_inherited_docstrings/extension/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> extension","text":""},{"location":"reference/griffe_inherited_docstrings/extension/#griffe_inherited_docstrings.extension","title":"extension","text":"<p>The Griffe extension.</p> <p>Classes:</p> <ul> <li> <code>InheritDocstringsExtension</code>         \u2013          <p>Griffe extension for inheriting docstrings.</p> </li> </ul>"},{"location":"reference/griffe_inherited_docstrings/extension/#griffe_inherited_docstrings.extension.InheritDocstringsExtension","title":"InheritDocstringsExtension","text":"<p>             Bases: <code>Extension</code></p> <p>Griffe extension for inheriting docstrings.</p> <p>Methods:</p> <ul> <li> <code>on_package_loaded</code>           \u2013            <p>Inherit docstrings from parent classes once the whole package is loaded.</p> </li> </ul>"},{"location":"reference/griffe_inherited_docstrings/extension/#griffe_inherited_docstrings.extension.InheritDocstringsExtension.on_package_loaded","title":"on_package_loaded","text":"<pre><code>on_package_loaded(*, pkg: Module) -&gt; None\n</code></pre> <p>Inherit docstrings from parent classes once the whole package is loaded.</p> Source code in <code>src/griffe_inherited_docstrings/extension.py</code> <pre><code>def on_package_loaded(self, *, pkg: Module) -&gt; None:\n    \"\"\"Inherit docstrings from parent classes once the whole package is loaded.\"\"\"\n    _inherit_docstrings(pkg)\n</code></pre>"},{"location":"coverage/","title":"Coverage report","text":""}]}